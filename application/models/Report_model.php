<?phpdefined('BASEPATH') OR die('No direct access');class Report_Model extends MY_Model {    public function __construct() {        parent::__construct();    }    public function get_client_report($date_from, $date_to) {        $date_from_ymd = date('Y-m-d 00:00:00', strtotime(str_replace('/', '-', $date_from)));        $date_to_ymd = date('Y-m-d 23:59:59', strtotime(str_replace('/', '-', $date_to)));        $this->db->select('CONCAT(invoices.invoice_no_prefix,invoices.invoice_no) AS invoice_no,clients.name AS client_name,invoices.total_amount,invoices.created');        $this->db->where('invoices.created BETWEEN "' . $date_from_ymd . '" AND "' . $date_to_ymd . '"');        //$this->db->where('clients.name ', 'test' );//        $this->db-where(array('created >=' => $date_from_ymd,'created >=' => $date_to_ymd));        $this->db->join('clients', 'clients.id=invoices.client_id', 'left');        $this->db->from('invoices');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_transaction_report($date_from, $date_to) {        $records = array();        $date_from_ymd = date('Y-m-d 00:00:00', strtotime(str_replace('/', '-', $date_from)));        $date_to_ymd = date('Y-m-d 23:59:59', strtotime(str_replace('/', '-', $date_to)));//        $this->db->select('CONCAT(invoices.invoice_no_prefix,invoices.invoice_no) AS invoice_no,clients.name AS client_name,invoices.total_amount,invoices.created');        $this->db->select('CONCAT(client_payments.receipt_no_prefix,client_payments.receipt_no) AS receipt_no,CONCAT(invoices.invoice_no_prefix,invoices.invoice_no) AS invoice_no,clients.name AS client_name,client_payments.amount,client_payments.created');        $this->db->where('client_payments.created BETWEEN "' . $date_from_ymd . '" AND "' . $date_to_ymd . '"');//        $this->db-where(array('created >=' => $date_from_ymd,'created >=' => $date_to_ymd));        $this->db->join('clients', 'clients.id=client_payments.client_id', 'left');        $this->db->join('invoices', 'invoices.id=client_payments.invoice_id', 'left');        $this->db->from('client_payments');        $query = $this->db->get();        if ($query->num_rows() > 0) {            $records = $query->result_array();        }        $this->db->select('vendor_payments.vendor_receipt_no AS receipt_no,CONCAT(release_orders.release_order_no_prefix,release_orders.release_order_no) AS release_order_no,vendors.company_name AS vendor_name,vendor_payments.amount,vendor_payments.created');        $this->db->where('vendor_payments.created BETWEEN "' . $date_from_ymd . '" AND "' . $date_to_ymd . '"');//        $this->db-where(array('created >=' => $date_from_ymd,'created >=' => $date_to_ymd));        $this->db->join('vendors', 'vendors.id=vendor_payments.vendor_id', 'left');        $this->db->join('release_orders', 'release_orders.id=vendor_payments.release_order_id', 'left');        $this->db->from('vendor_payments');        $query = $this->db->get();        if ($query->num_rows() > 0) {//            $records = $query->result_array();            $records = array_merge($records, $query->result_array());            usort($records, array($this, 'sort_by_date'));//            print_r($records);//            die();        }                if(!empty($records)) {            return $records;        }        return FALSE;    }    private function sort_by_date($rec1, $rec2) {        $d1 = new DateTime($rec1['created']);        $d2 = new DateTime($rec2['created']);        $diff = $d2->diff($d1);//        print_r($diff);        $days = $diff->days;        if ($diff->invert == 1) {            $days = -$diff->days;        }        return $days;    }    public function get_vendor_report($date_from, $date_to) {        $date_from_ymd = date('Y-m-d 00:00:00', strtotime(str_replace('/', '-', $date_from)));        $date_to_ymd = date('Y-m-d 23:59:59', strtotime(str_replace('/', '-', $date_to)));        $this->db->select('release_orders.id,CONCAT(release_orders.release_order_no_prefix,release_orders.release_order_no) AS release_order_no,clients.name AS client_name, vendors.company_name AS vendor_name, ad_types.name AS advertisement_name,release_orders.invoice_generated,release_orders.created');        $this->db->where('release_orders.created BETWEEN "' . $date_from_ymd . '" AND "' . $date_to_ymd . '"');//        $this->db-where(array('created >=' => $date_from_ymd,'created >=' => $date_to_ymd));        $this->db->join('vendors', 'vendors.id=release_orders.vendor_id', 'left');        $this->db->join('clients', 'clients.id=release_orders.client_id', 'left');        $this->db->join('ad_types', 'ad_types.id=release_orders.advertisement_type_id', 'left');        $this->db->from('release_orders');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }}