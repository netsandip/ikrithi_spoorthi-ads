<?phpdefined('BASEPATH') OR die("No direct script access allowed");class Invoice_Model extends MY_Model {    public function __construct() {        parent::__construct();        $this->_tablename = "invoices";    }    public function find_by_id($id) {        $this->db->where('id', $id);        $this->db->from($this->_tablename);        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->row();        }        return FALSE;    }    public function get_invoice_items($id) {        $this->db->where('invoice_id', $id);        $this->db->from('invoice_items');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_insertion_dates($order_item_id) {        $this->db->where('invoice_item_id', $order_item_id);        $this->db->from('invoice_item_insertion_dates');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_invoice($id) {        $this->db->select($this->_tablename . '.id,' . $this->_tablename . '.vat,' . $this->_tablename . '.discount,' . $this->_tablename . '.nocredit,' . $this->_tablename . '.client_id,' . $this->_tablename . '.hue,CONCAT(' . $this->_tablename . '.invoice_no_prefix,' . $this->_tablename . '.invoice_no) AS invoice_no,clients.name AS client_name');        $this->db->join('clients', 'clients.id=' . $this->_tablename . '.client_id', 'left');        $this->db->where($this->_tablename . '.id', $id);        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->row();        }        return FALSE;    }    public function get_invoice_orders($id) {        $this->db->select('invoice_orders.id,invoice_orders.release_order_id,invoice_orders.caption,invoice_orders.advertisement_type');        $this->db->where_in('invoice_orders.invoice_id', $id);//        $this->db->join('clients', 'clients.id=' . 'invoice_orders.client_id', 'left');//        $this->db->join('ad_types', 'ad_types.id=' . $this->_tablename . '.advertisement_type_id', 'left');        $this->db->order_by('invoice_orders.release_order_id');        $this->db->from('invoice_orders');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_invoices_in($ids) {        $this->db->select($this->_tablename . '.id,' . $this->_tablename . '.caption,ad_types.name AS advertisement_name,clients.name AS client_name, clients.address AS client_address');        $this->db->where_in($this->_tablename . '.id', $ids);        $this->db->join('clients', 'clients.id=' . $this->_tablename . '.client_id', 'left');        $this->db->join('ad_types', 'ad_types.id=' . $this->_tablename . '.advertisement_type_id', 'left');        $this->db->from($this->_tablename);        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result_array();        }        return FALSE;    }    public function get_invoice_order_items($id) {        $this->db->select('invoice_order_items.id,invoice_order_items.release_order_item_id,invoice_order_items.release_order_no,invoice_order_items.package,invoice_order_items.publication,invoice_order_items.edition,invoice_order_items.page,invoice_order_items.size,invoice_order_items.base_rate,invoice_order_items.insertion_date');        $this->db->where_in('invoice_order_items.invoice_id', $id);        $this->db->order_by('release_order_item_id');        $this->db->from('invoice_order_items');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_invoice_items_in($ids) {        $this->db->select($this->_tablename . '.invoice_no_prefix,' . $this->_tablename . '.invoice_no,invoice_items.publication,invoice_items.edition,invoice_items.page,invoice_items.size,invoice_items.base_rate,invoice_item_insertion_dates.date AS insertion_date,invoice_items.package_id,packages.name AS package_name,packages.description AS package_desc,packages.paid AS package_paid,packages.free AS package_free');        $this->db->where_in('invoice_items.invoice_id', $ids);        $this->db->join($this->_tablename, $this->_tablename . '.id=invoice_items.invoice_id', 'left');        $this->db->join('invoice_item_insertion_dates', 'invoice_item_insertion_dates.invoice_item_id=invoice_items.id', 'left');        $this->db->join('packages', 'packages.id=invoice_items.package_id', 'left');        $this->db->from('invoice_items');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_last_invoice_no() {        $this->db->select_max('invoice_no');        $query = $this->db->get($this->_tablename);        $result = $query->result();        return $result[0]->invoice_no;    }    public function get_view($data) {        $columns = array('', $this->_tablename . '.created', $this->_tablename . '.invoice_no', $this->_tablename . '.total_amount', '');        $this->db->select($this->_tablename . '.id,clients.name AS client_name,CONCAT(invoice_no_prefix,invoice_no) AS invoice_no,total_amount,' . $this->_tablename . '.created');        if (isset($data['search']) && $data['search'] != '') {            $this->db->like($this->_tablename . '.name', $data['search']);        }        if (isset($data['sort']) && $data['sort'] != '') {            $this->db->order_by($columns[$data['sort']], strtoupper($data['order']));        }        $db_count = clone $this->db;        $this->db->join('clients', 'clients.id=' . $this->_tablename . '.client_id', 'left');        $this->db->limit($data['limit'], $data['offset']);        $query = $this->db->get($this->_tablename);//        echo $query = $this->db->get_compiled_select($this->_tablename);        $count = $db_count->count_all_results($this->_tablename);        $return = array('query' => $query, 'count' => $count);        if ($query->num_rows() > 0) {            return $return;        }        return FALSE;    }    public function create() {        $this->load->model('ad_type_model');//        print_r($_POST);die();        $client_id = $this->input->post('sub_client');        if (empty($client_id)) {            $client_id = $this->input->post('client');        }        $hue = $this->input->post('hue');        // release orders        $captions = $this->input->post('caption[]');        $order_dates = $this->input->post('order_date[]');        $advertisement_type_names = $this->input->post('advertisement_name');        // release order items        $invoice_item_release_order_item_ids = $this->input->post('release_order_item_id[]');        $invoice_item_release_order_item_nos = $this->input->post('release_order_no[]');        $invoice_item_base_rate = $this->input->post('base_rate[]');        $invoice_item_publications = $this->input->post('publication[]');        $invoice_item_insertion_dates = $this->input->post('insertion_date[]');        $invoice_item_editions = $this->input->post('edition[]');        $invoice_item_page_types = $this->input->post('page_type[]');        $invoice_item_package = $this->input->post('package[]');        $invoice_item_size = $this->input->post('size[]');        $last_invoice_no = $this->get_last_invoice_no();        $invoice_no = $last_invoice_no + 1;        // Added by vinay R         //$discount = $this->input->post('discount');         //$vat = $this->input->post('tax');         //$nocredit = $this->input->post('nocredit');        $invoice_data = array(            'client_id' => $client_id,            'invoice_no_prefix' => 'IN/',            'invoice_no' => $invoice_no,            'hue' => $hue,            'created' => date('Y-m-d H:i:s', time()),        );        $this->db->insert($this->_tablename, $invoice_data);        $invoice_id = $this->db->insert_id();        if ($invoice_id) {            foreach ($order_dates as $key => $value) {                $invoice_order_data = array(                    'invoice_id' => $invoice_id,                    'release_order_id' => $key,                    'caption' => $captions[$key],                    'advertisement_type' => $advertisement_type_names[$key],                    'order_date' => $order_dates[$key],                    'created' => date('Y-m-d H:i:s', time()),                );                $this->db->insert('invoice_orders', $invoice_order_data);                // MARK invoice_generated in release_orders table                $this->db->set('invoice_generated', 1);                $this->db->where('id', $key);                $this->db->update('release_orders');            }        }        if ($invoice_id) {            $invoice_total = 0;            foreach ($invoice_item_publications as $i => $value) {                $invoice_item_data = array(                    'invoice_id' => $invoice_id,                    'release_order_item_id' => $invoice_item_release_order_item_ids[$i],                    'release_order_no' => $invoice_item_release_order_item_nos[$i],                    'package' => $invoice_item_package[$i],                    'publication' => $invoice_item_publications[$i],                    'edition' => $invoice_item_editions[$i],                    'page' => $invoice_item_page_types[$i],                    'size' => $invoice_item_size[$i],                    'base_rate' => $invoice_item_base_rate[$i],                    'insertion_date' => $invoice_item_insertion_dates[$i],                    'created' => date('Y-m-d H:i:s', time()),                );                $size_arr = explode("_", $invoice_item_size[$i]);                if (isset($size_arr[1])) {                    $size = $size_arr[0] * $size_arr[1];                } else {                    $size = $size_arr[0];                }                $invoice_total += $invoice_item_base_rate[$i] * $size;                $this->db->insert('invoice_order_items', $invoice_item_data);            }            // Update total invoice amount in invoice table            $this->db->where('id', $invoice_id);            //$this->db->update($this->_tablename, array('total_amount' => $invoice_total,'vat' => $vat,'discount' => $discount,'nocredits' => $nocredit));            $this->db->update($this->_tablename, array('total_amount' => $invoice_total));        }    }    public function update($id) {         $this->load->model('ad_type_model');         $client_id = $this->input->post('client');        $hue = $this->input->post('hue');        // Added by vinay R         $discount = $this->input->post('discount');         $vat = $this->input->post('tax');         $nocredit = $this->input->post('nocredit');        // release orders        $captions = $this->input->post('caption[]');        $order_dates = $this->input->post('order_date[]');        $advertisement_type_names = $this->input->post('advertisement_name');        // release order items        $invoice_item_release_order_item_ids = $this->input->post('release_order_item_id[]');        $invoice_item_release_order_item_nos = $this->input->post('release_order_no[]');        $invoice_item_base_rate = $this->input->post('base_rate[]');        $invoice_item_publications = $this->input->post('publication[]');        $invoice_item_insertion_dates = $this->input->post('insertion_date[]');        $invoice_item_editions = $this->input->post('edition[]');        $invoice_item_page_types = $this->input->post('page_type[]');        $invoice_item_package = $this->input->post('package[]');        $invoice_item_size = $this->input->post('size[]');        $invoice_data = array(            'client_id' => $client_id,            'hue' => $hue,            'modified' => date('Y-m-d H:i:s', time()),        );        $this->db->where('id', $id);        $this->db->update($this->_tablename, $invoice_data);        // BEGIN : invoice order items update        $this->db->where('invoice_id', $id);        $this->db->delete('invoice_order_items');        $invoice_total = 0;        foreach ($invoice_item_publications as $i => $value) {            $invoice_item_data = array(                'invoice_id' => $id,                'release_order_item_id' => $invoice_item_release_order_item_ids[$i],                'release_order_no' => $invoice_item_release_order_item_nos[$i],                'package' => $invoice_item_package[$i],                'publication' => $invoice_item_publications[$i],                'edition' => $invoice_item_editions[$i],                'page' => $invoice_item_page_types[$i],                'size' => $invoice_item_size[$i],                'base_rate' => $invoice_item_base_rate[$i],                'insertion_date' => $invoice_item_insertion_dates[$i],                'created' => date('Y-m-d H:i:s', time()),            );            $size_arr = explode("_", $invoice_item_size[$i]);            if (isset($size_arr[1])) {                $size = $size_arr[0] * $size_arr[1];            } else {                $size = $size_arr[0];            }            $invoice_total += $invoice_item_base_rate[$i] * $size;            $this->db->insert('invoice_order_items', $invoice_item_data);        }        // Update total invoice amount in invoice table        $this->db->where('id', $id);        //$this->db->update($this->_tablename, array('total_amount' => $invoice_total,'nocredits' => $nocredit));        $this->db->update($this->_tablename, array('total_amount' => $invoice_total,'vat' => $vat,'discount' => $discount,'nocredits' => $nocredit));        // END : order items update//        echo date('Y-m-d',  strtotime(str_replace('/', '-', $invoice_item_insertion_dates[0])));//        die();    }}