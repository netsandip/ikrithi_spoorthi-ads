<?phpclass Vendor_Model extends CI_Model {    private $_tablename;    function __construct() {        parent::__construct();        $this->_tablename = "vendors";    }    public function total_records() {        return $this->db->count_all($this->_tablename);    }    public function find_all($limit = NULL, $offset = NULL) {        if ($limit != NULL && $offset != NULL) {            $this->db->limit($limit, $offset);        }        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function find_by_id($id = NULL) {        $this->db->where('id', $id);        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->row();        }        return FALSE;    }    public function get_all_vendor_publications() {        $this->db->select('publication_id');        $this->db->from('vendor_to_publication');        $query = $this->db->get();        if ($query->num_rows() > 0) {            $rows = $query->result_array();            foreach ($rows as $row) {                $data[] = $row['publication_id'];            }            return $data;        }        return FALSE;    }    public function get_coordinator($id) {//        $this->db->select('');        $this->db->from('vendor_coordinators');        $this->db->where('id', $id);        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->row();        }        return FALSE;    }    public function get_coordinators($id) {//        $this->db->select('');        $this->db->from('vendor_coordinators');        $this->db->where('vendor_id', $id);        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_publications($id) {        $this->db->select('publications.id AS publication_id,publications.name AS publication_name');        $this->db->from('vendor_to_publication');        $this->db->join('publications', 'publications.id=vendor_to_publication.publication_id', 'left');        $this->db->where('vendor_to_publication.vendor_id', $id);        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_packages($id = NULL, $ad_type_id = NULL) {        // get publication ids linked to this vendor        $this->db->select('publication_id');        $this->db->where('vendor_id', $id);        $query = $this->db->get('vendor_to_publication');        if ($query->num_rows() == 0) {            return FALSE;        }        $publication_id_objs = $query->result();        $publication_ids = array();        foreach ($publication_id_objs as $publication_id) {            $publication_ids[] = $publication_id->publication_id;        }        // get publication ids linked to this vendor        $this->db->select('packages.id AS package_id,packages.name AS package_name');        $this->db->where_in('publication_id', $publication_ids);        $this->db->where('ad_type_id', $ad_type_id);        $query = $this->db->get('packages');        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_view($data) {        $columns = array('', $this->_tablename . '.company_name', $this->_tablename . '.company_phone', $this->_tablename . '.commission', 'vendor_types.name', '');        $this->db->select($this->_tablename . '.id,' . $this->_tablename . '.vendor_type_id,' . $this->_tablename . '.company_name,' . $this->_tablename . '.company_phone,' . $this->_tablename . '.commission,vendor_types.name AS vendor_type_name');        if (isset($data['search']) && $data['search'] != '') {            $this->db->like($this->_tablename . '.company_name', $data['search']);            $this->db->or_like($this->_tablename . '.company_phone', $data['search']);            $this->db->or_like($this->_tablename . '.commission', $data['search']);            $this->db->or_like('vendor_types.name', $data['search']);        }        if (isset($data['sort']) && $data['sort'] != '') {            $this->db->order_by($columns[$data['sort']], strtoupper($data['order']));        }        $this->db->join('vendor_types', 'vendor_types.id = ' . $this->_tablename . '.vendor_type_id', 'left');        $db_count = clone $this->db;        $this->db->limit($data['limit'], $data['offset']);        $query = $this->db->get($this->_tablename);        $count = $db_count->count_all_results($this->_tablename);        $return = array('query' => $query, 'count' => $count);        if ($query->num_rows() > 0) {            return $return;        }        return FALSE;    }    public function find_by_query($data) {        $this->db->where($data);        if ($limit != NULL && $offset != NULL) {            $this->db->limit($limit, $offset);        }        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function add_coordinator($vendor_id) {        $count = count($this->input->post('fullname'));        $fullnames = $this->input->post('fullname');        $phone_nos = $this->input->post('phone');        $emails = $this->input->post('email');        $designations = $this->input->post('designation');        for ($i = 0; $i < $count; $i++) {            $data = array(                'vendor_id' => $vendor_id,                'name' => $fullnames,                'phone' => $phone_nos,                'email' => $emails,                'designation' => $designations,                'created' => date('Y-m-d H:i:s', time())            );            $this->db->insert('vendor_coordinators', $data);        }    }    public function update_coordinator($coordinator_id) {        $count = count($this->input->post('fullname'));        $fullnames = $this->input->post('fullname');        $phone_nos = $this->input->post('phone');        $emails = $this->input->post('email');        $designations = $this->input->post('designation');        for ($i = 0; $i < $count; $i++) {            $data = array(                'name' => $fullnames,                'phone' => $phone_nos,                'email' => $emails,                'designation' => $designations,                'created' => date('Y-m-d H:i:s', time())            );            $this->db->where('id', $coordinator_id);            $this->db->update('vendor_coordinators', $data);        }    }    public function create() {        $data = array(            'parent_id' => $this->input->post('parent_id'),            'company_name' => $this->input->post('company_name'),            'company_phone' => $this->input->post('company_phone'),            'address' => $this->input->post('address'),            'commission' => $this->input->post('commission'),            'vendor_type_id' => $this->input->post('vendor_type'),            'created' => date('Y-m-d H:i:s', time())        );        $this->db->insert($this->_tablename, $data);        if ($this->db->affected_rows() > 0) {            $insert_id = $this->db->insert_id();            /* BEGIN: insert publications */            $publications = $this->input->post('publications[]');            foreach ($publications as $publication) {                $data = array('vendor_id' => $insert_id, 'publication_id' => $publication);                $this->db->insert('vendor_to_publication', $data);            }            /* END: insert publications */            /* BEGIN: insert co ordinators */            $count = count($this->input->post('fullname[]'));            $fullnames = $this->input->post('fullname[]');            $phone_nos = $this->input->post('phone[]');            $emails = $this->input->post('email[]');            $designations = $this->input->post('designation[]');            for ($i = 0; $i < $count; $i++) {                $data = array(                    'vendor_id' => $insert_id,                    'name' => $fullnames[$i],                    'phone' => $phone_nos[$i],                    'email' => $emails[$i],                    'designation' => $designations[$i],                    'created' => date('Y-m-d H:i:s', time())                );                $this->db->insert('vendor_coordinators', $data);            }            /* END: insert co ordinators */            return $insert_id;        }        return FALSE;    }    public function find_release_orders($vendor_id) {        $this->db->select('release_orders.id,CONCAT(release_order_no_prefix,release_order_no) AS release_order_no');        $conditions = array(            'vendor_id' => $vendor_id,            'invoice_generated' => 0,        );        $this->db->where($conditions);        $this->db->order_by('release_order_no', 'ASC');        $query = $this->db->get('release_orders');        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function update($id) {        $data = array(            'parent_id' => $this->input->post('parent_id'),            'company_name' => $this->input->post('company_name'),            'company_phone' => $this->input->post('company_phone'),            'address' => $this->input->post('address'),            'commission' => $this->input->post('commission'),            'vendor_type_id' => $this->input->post('vendor_type'),            'modified' => date('Y-m-d H:i:s', time())        );        $this->db->where('id', $id);        $this->db->update($this->_tablename, $data);        $affected_rows = $this->db->affected_rows();        if ($affected_rows > 0) {            /* BEGIN: insert publications */            $publications = $this->input->post('publications[]');            if (!empty($publications)) {                // Delete assigned publications                $this->delete_vendor_publications($id);                foreach ($publications as $publication) {                    $data = array('vendor_id' => $id, 'publication_id' => $publication);                    $this->db->insert('vendor_to_publication', $data);                }            }            /* END: insert publications */            return $affected_rows;        }        return FALSE;    }    public function delete_vendor_publications($vendor_id) {        $this->db->where('vendor_id', $vendor_id);        $this->db->delete('vendor_to_publication');        $affected_rows = $this->db->affected_rows();        if ($affected_rows > 0) {            return $affected_rows;        }        return FALSE;    }    public function delete($id) {        $this->db->where('id', $id);        $this->db->delete($this->_tablename);        $affected_rows = $this->db->affected_rows();        if ($affected_rows > 0) {            return $affected_rows;        }        return FALSE;    }}