<?phpclass Payment_Model extends CI_Model {    private $_tablename;    function __construct() {        parent::__construct();    }    public function total_records() {        return $this->db->count_all($this->_tablename);    }    public function get_vendor_payments($id = NULL) {        $this->_tablename = 'vendor_payments';        $this->db->select('CONCAT(release_orders.release_order_no_prefix,release_orders.release_order_no) AS release_order_no,release_orders.total_amount AS ro_amount,vendors.company_name AS vendor_name,vendor_payments.id,vendor_payments.amount,vendor_payments.ref_no,vendor_payments.payment_mode,vendor_payments.vendor_receipt_date,vendor_payments.vendor_receipt_no');        $this->db->join('vendors', 'vendors.id=vendor_payments.vendor_id', 'left');        $this->db->join('release_orders', 'release_orders.id=vendor_payments.release_order_id', 'left');        if ($id !== NULL) {            $this->db->where('release_order_id', $id);        }//        echo $query = $this->db->get_compiled_select($this->_tablename);        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_client_payment_amount($invoice_id) {        $this->_tablename = 'client_payments';        $this->db->select('SUM(amount) AS total_amount');        $this->db->where('invoice_id', $invoice_id);        $query = $this->db->get($this->_tablename);        return $query->row();    }    public function get_client_payments($id = NULL) {        $this->_tablename = 'client_payments';        $this->db->select('CONCAT(invoices.invoice_no_prefix,invoices.invoice_no) AS invoice_no,invoices.total_amount AS invoice_amount,clients.name AS client_name,client_payments.id,client_payments.amount,client_payments.payment_mode,client_payments.ref_no,client_payments.receipt_date,client_payments.receipt_no_prefix,client_payments.receipt_no');        $this->db->join('clients', 'clients.id=client_payments.client_id', 'left');        $this->db->join('invoices', 'invoices.id=client_payments.invoice_id', 'left');        if ($id !== NULL) {            $this->db->where('invoice_id', $id);        }        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function find_all($limit = NULL, $offset = NULL, $order = array()) {        if ($limit != NULL && $offset != NULL) {            $this->db->limit($limit, $offset);        }        if (!empty($order)) {            $this->db->order_by($order['column'], $order['dir']);        }        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function find_all_array($limit = NULL, $offset = NULL, $order = array()) {        if ($limit != NULL && $offset != NULL) {            $this->db->limit($limit, $offset);        }        if (!empty($order)) {            $this->db->order_by($order['column'], $order['dir']);        }        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->result_array();        }        return FALSE;    }    public function find_by_id($id = NULL) {        $this->db->where('id', $id);        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->row();        }        return FALSE;    }    public function get_view($data) {        $columns = array('', 'name', '');        $this->db->select('id,name');        if (isset($data['search']) && $data['search'] != '') {            $this->db->like('name', $data['search']);        }        if (isset($data['sort']) && $data['sort'] != '') {            $this->db->order_by($columns[$data['sort']], strtoupper($data['order']));        }        $db_count = clone $this->db;        $this->db->limit($data['limit'], $data['offset']);        $query = $this->db->get($this->_tablename);        $count = $db_count->count_all_results($this->_tablename);        $return = array('query' => $query, 'count' => $count);        if ($query->num_rows() > 0) {            return $return;        }        return FALSE;    }    public function find_by_query($data) {        $this->db->where($data);        if ($limit != NULL && $offset != NULL) {            $this->db->limit($limit, $offset);        }        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function create_vendor_payment() {        $this->_tablename = 'vendor_payments';        $data = array(            'vendor_receipt_no' => $this->input->post('vendor_receipt_no'),            'vendor_id' => $this->input->post('vendor'),            'release_order_id' => $this->input->post('release_order'),            'amount' => $this->input->post('amount'),            'payment_mode' => $this->input->post('payment_mode'),            'ref_no' => $this->input->post('ref_no'),            'vendor_receipt_date' => date('Y-m-d', time()),            'created' => date('Y-m-d H:i:s', time())        );        $this->db->insert($this->_tablename, $data);        if ($this->db->affected_rows() > 0) {            return $this->db->insert_id();        }        return FALSE;    }    public function get_last_receipt_no() {        $this->_tablename = 'client_payments';        $this->db->select_max('receipt_no');        $query = $this->db->get($this->_tablename);        $result = $query->result();        return $result[0]->receipt_no;    }    public function create_client_payment() {        $last_receipt_no = $this->get_last_receipt_no();        $receipt_no = $last_receipt_no + 1;        $this->_tablename = 'client_payments';        $data = array(            'receipt_no_prefix' => 'RP',            'receipt_no' => $receipt_no,            'client_id' => $this->input->post('client'),            'invoice_id' => $this->input->post('invoice'),            'amount' => $this->input->post('amount'),            'payment_mode' => $this->input->post('payment_mode'),            'ref_no' => $this->input->post('ref_no'),            'receipt_date' => date('Y-m-d', time()),            'created' => date('Y-m-d H:i:s', time())        );        $this->db->insert($this->_tablename, $data);        if ($this->db->affected_rows() > 0) {            return $this->db->insert_id();        }        return FALSE;    }    public function update($id) {        $data = array(            'name' => $this->input->post('name'),            'modified' => date('Y-m-d H:i:s', time())        );        $this->db->where('id', $id);        $this->db->update($this->_tablename, $data);        $affected_rows = $this->db->affected_rows();        if ($affected_rows > 0) {            return $affected_rows;        }        return FALSE;    }    public function delete($id) {        $this->db->where('id', $id);        $this->db->delete($this->_tablename);        $affected_rows = $this->db->affected_rows();        if ($affected_rows > 0) {            return $affected_rows;        }        return FALSE;    }}