<?phpdefined('BASEPATH') OR die("No direct script access allowed");class Release_Order_Model extends MY_Model {    public function __construct() {        parent::__construct();        $this->_tablename = "release_orders";    }    public function find_by_id($id) {        $this->db->where('id', $id);        $this->db->from($this->_tablename);        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->row();        }        return FALSE;    }    public function get_release_order($id) {        $this->db->select($this->_tablename . '.id,' . $this->_tablename . '.client_id,CONCAT(' . $this->_tablename . '.release_order_no_prefix,' . $this->_tablename . '.release_order_no) AS release_order_no,clients.name AS client_name');        $this->db->join('clients', 'clients.id=' . $this->_tablename . '.client_id', 'left');        $this->db->where($this->_tablename . '.id', $id);        $query = $this->db->get($this->_tablename);        if ($query->num_rows() > 0) {            return $query->row();        }        return FALSE;    }    public function get_release_order_items($id) {        $this->db->select('release_order_items.*,release_orders.order_date');        $this->db->where('release_order_id', $id);        $this->db->join('release_orders', 'release_orders.id=release_order_items.release_order_id', 'left');        $this->db->from('release_order_items');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_insertion_dates($order_item_id) {        $this->db->where('release_order_item_id', $order_item_id);        $this->db->from('release_order_item_insertion_dates');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_release_orders_in($ids) {        $this->db->select($this->_tablename . '.id,' . $this->_tablename . '.caption,' . $this->_tablename . '.client_id,' . $this->_tablename . '.order_date,ad_types.id AS advertisement_id,ad_types.name AS advertisement_name,clients.name AS client_name, clients.address AS client_address');        $this->db->where_in($this->_tablename . '.id', $ids);        $this->db->join('clients', 'clients.id=' . $this->_tablename . '.client_id', 'left');        $this->db->join('ad_types', 'ad_types.id=' . $this->_tablename . '.advertisement_type_id', 'left');        $this->db->from($this->_tablename);        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result_array();        }        return FALSE;    }    public function get_release_order_items_in($ids) {        $this->db->select($this->_tablename . '.release_order_no_prefix,' . $this->_tablename . '.release_order_no,release_order_items.id AS release_order_item_id,release_order_items.publication,release_order_items.edition,release_order_items.page,release_order_items.size,release_order_items.base_rate,release_order_item_insertion_dates.date AS insertion_date,release_order_items.package_id,packages.name AS package_name,packages.description AS package_desc,packages.paid AS package_paid,packages.free AS package_free');        $this->db->where_in('release_order_items.release_order_id', $ids);        $this->db->join($this->_tablename, $this->_tablename . '.id=release_order_items.release_order_id', 'left');        $this->db->join('release_order_item_insertion_dates', 'release_order_item_insertion_dates.release_order_item_id=release_order_items.id', 'left');        $this->db->join('packages', 'packages.id=release_order_items.package_id', 'left');        $this->db->from('release_order_items');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        return FALSE;    }    public function get_last_release_order_no() {        $this->db->select_max('release_order_no');        $query = $this->db->get($this->_tablename);        $result = $query->result();        return $result[0]->release_order_no;    }    public function get_view($data) {        $columns = array('', $this->_tablename . '.order_date', $this->_tablename . '.release_order_no', 'vendors.company_name', 'clients.name', $this->_tablename . '.caption', $this->_tablename . '.total_amount', '');        $this->db->select($this->_tablename . '.id,CONCAT(release_order_no_prefix,release_order_no) AS release_order_no,clients.name AS client_name, vendors.company_name AS vendor_name,caption,order_date,total_amount,invoice_generated');        if (isset($data['search']) && $data['search'] != '') {            $this->db->like($this->_tablename . '.name', $data['search']);        }        if (isset($data['sort']) && $data['sort'] != '') {            $this->db->order_by($columns[$data['sort']], strtoupper($data['order']));        } else {            $this->db->order_by('created', 'DESC');        }        $this->db->join('clients', 'clients.id = ' . $this->_tablename . '.client_id', 'left');        $this->db->join('vendors', 'vendors.id = ' . $this->_tablename . '.vendor_id', 'left');        $db_count = clone $this->db;        $this->db->limit($data['limit'], $data['offset']);        $query = $this->db->get($this->_tablename);//        echo $query = $this->db->get_compiled_select($this->_tablename);        $count = $db_count->count_all_results($this->_tablename);        $return = array('query' => $query, 'count' => $count);        if ($query->num_rows() > 0) {            return $return;        }        return FALSE;    }    public function create() {        $this->load->model('ad_type_model');        $this->load->model('vendor_model');        $tax_id = $this->input->post('tax');        $vendor_id = $this->input->post('vendor');        $coordinator_id = $this->input->post('coordinator');        $client_id = $this->input->post('client');        $caption = $this->input->post('caption');        $advertisement_type_id = $this->input->post('ad_type');        $package_id = $this->input->post('package');        $material_type = $this->input->post('material_type');        $material_status = $this->input->post('material_status');        $ad_row = $this->ad_type_model->find_by_id($advertisement_type_id);        $total_amount = 0;        // get vendor details        $vendor = $this->vendor_model->find_by_id($vendor_id);                // get coordinator details        $coordinator = $this->vendor_model->get_coordinator($coordinator_id);                // get tax detail        $tax = $this->tax_model->find_by_id($tax_id);        // release order items        $release_order_item_count = count($this->input->post('publication[]'));        $release_order_item_publications = $this->input->post('publication[]');        $release_order_item_insertion_dates = $this->input->post('insertion_date[]');        $release_order_item_editions = $this->input->post('edition[]');        $release_order_item_page_types = $this->input->post('page_type[]');        if ($ad_row->size == "width_height") {            $release_order_item_size_width = $this->input->post('size_width[]');            $release_order_item_size_height = $this->input->post('size_height[]');        } else {            $release_order_item_size_single = $this->input->post('size[]');        }        $release_order_item_base_rate = $this->input->post('base_rate[]');//        $release_order_item_package = $this->input->post('package[]');        $last_release_order_no = $this->get_last_release_order_no();        $release_order_no = $last_release_order_no + 1;        $release_order_data = array(            'release_order_no_prefix' => 'PU/',            'release_order_no' => $release_order_no,            'vendor_id' => $vendor_id,//            'coordinator_name' => $coordinator->name,//            'coordinator_designation' => $coordinator->designation,            'client_id' => $client_id,            'caption' => $caption,            'advertisement_type_id' => $advertisement_type_id,            'package_id' => $package_id,            'material_type' => $material_type,            'material_status' => $material_status,            'commission' => $vendor->commission,            'order_date' => date('Y-m-d', time()),            'created' => date('Y-m-d H:i:s', time()),        );        $this->db->insert($this->_tablename, $release_order_data);        $release_order_id = $this->db->insert_id();        if ($release_order_id) {            for ($i = 0; $i < $release_order_item_count; $i++) {                if ($ad_row->size == "width_height") {                    $release_order_item_size = $release_order_item_size_width[$i] . '_' . $release_order_item_size_height[$i];                    $total_amount += $release_order_item_size_width[$i] * $release_order_item_size_height[$i] * $release_order_item_base_rate[$i];                } else {                    $release_order_item_size = $release_order_item_size_single[$i];                    $total_amount += $release_order_item_size_single[$i] * $release_order_item_base_rate[$i];                }                $release_order_item_data = array(                    'release_order_id' => $release_order_id,//                    'package_id' => $release_order_item_package[$i],                    'publication' => $release_order_item_publications[$i],                    'edition' => $release_order_item_editions[$i],                    'page' => $release_order_item_page_types[$i],                    'size' => $release_order_item_size,                    'base_rate' => $release_order_item_base_rate[$i],                    'created' => date('Y-m-d H:i:s', time()),                );                $this->db->insert('release_order_items', $release_order_item_data);                $insert_id = $this->db->insert_id();                if ($insert_id) {                    $release_order_item_insertion_dates_arr = explode(',', $release_order_item_insertion_dates[$i]);                    foreach ($release_order_item_insertion_dates_arr as $release_order_item_insertion_date) {                        $release_order_item_insertion_date_data = array(                            'release_order_item_id' => $insert_id,                            'date' => date('Y-m-d', strtotime(str_replace('/', '-', $release_order_item_insertion_date))),                        );                        $this->db->insert('release_order_item_insertion_dates', $release_order_item_insertion_date_data);                    }                }            }        }        // UPDATE COORDINATOR DETAIL        if($coordinator) {            $this->db->set('coordinator_name', $coordinator->name);            $this->db->set('coordinator_designation', $coordinator->designation);        }                // CALCULATE COMMISSION        if($vendor->commission > 0) {            $commission_amount = ($total_amount / 100) * $vendor->commission;        } else {            $commission_amount = 0;        }                // UPDATE TAX        if ($tax->type === 'percentage') {            $tax_amount = ($total_amount / 100) * $tax->value;        } else {            $tax_amount = $tax->value;        }        $total_amount = $tax_amount + $total_amount - $commission_amount;        $this->db->set('tax', $tax_amount);        $this->db->set('tax_name', $tax->name);                // UPDATE TOTAL AMOUNT        $this->db->set('total_amount', $total_amount);        $this->db->where('id', $release_order_id);        $this->db->update($this->_tablename);//        echo date('Y-m-d',  strtotime(str_replace('/', '-', $release_order_item_insertion_dates[0])));//        die();    }    public function update($id) {        $this->load->model('ad_type_model');//        print_r($this->input->post());        die();        $tax_id = $this->input->post('tax');        $vendor_id = $this->input->post('vendor');        $coordinator_id = $this->input->post('coordinator');        $client_id = $this->input->post('client');        $caption = $this->input->post('caption');        $advertisement_type_id = $this->input->post('ad_type');        $package_id = $this->input->post('package');        $material_type = $this->input->post('material_type');        $material_status = $this->input->post('material_status');        $total_amount = 0;        // get coordinator details        $coordinator = $this->vendor_model->get_coordinator($coordinator_id);        $ad_row = $this->ad_type_model->find_by_id($advertisement_type_id);        // get tax detail        $tax = $this->tax_model->find_by_id($tax_id);        // release order items        $release_order_item_count = count($this->input->post('publication[]'));        $release_order_item_publications = $this->input->post('publication[]');        $release_order_item_insertion_dates = $this->input->post('insertion_date[]');        $release_order_item_editions = $this->input->post('edition[]');        $release_order_item_page_types = $this->input->post('page_type[]');        if ($ad_row->size == "width_height") {            $release_order_item_size_width = $this->input->post('size_width[]');            $release_order_item_size_height = $this->input->post('size_height[]');        } else {            $release_order_item_size_single = $this->input->post('size[]');        }        $release_order_item_base_rate = $this->input->post('base_rate[]');//        $release_order_item_package = $this->input->post('package[]');//        $last_release_order_no = $this->get_last_release_order_no();//        $release_order_no = $last_release_order_no + 1;        $release_order_data = array(            'release_order_no_prefix' => 'PU/',//            'release_order_no' => $release_order_no,            'vendor_id' => $vendor_id,//            'coordinator_name' => $coordinator->name,//            'coordinator_designation' => $coordinator->designation,            'client_id' => $client_id,            'caption' => $caption,            'advertisement_type_id' => $advertisement_type_id,            'package_id' => $package_id,            'material_type' => $material_type,            'material_status' => $material_status,//            'tax_name' => $tax->name,//            'order_date' => date('Y-m-d', time()),            'modified' => date('Y-m-d H:i:s', time()),        );        $this->db->where('id', $id);        $this->db->update($this->_tablename, $release_order_data);        // BEGIN : order items update        $this->db->where('release_order_id', $id);        $this->db->delete('release_order_items');        for ($i = 0; $i < $release_order_item_count; $i++) {            if ($ad_row->size == "width_height") {                $release_order_item_size = $release_order_item_size_width[$i] . '_' . $release_order_item_size_height[$i];                $total_amount += $release_order_item_size_width[$i] * $release_order_item_size_height[$i] * $release_order_item_base_rate[$i];            } else {                $release_order_item_size = $release_order_item_size_single[$i];                $total_amount += $release_order_item_size_single[$i] * $release_order_item_base_rate[$i];            }            $release_order_item_data = array(                'release_order_id' => $id,//                'package_id' => $release_order_item_package[$i],                'publication' => $release_order_item_publications[$i],                'edition' => $release_order_item_editions[$i],                'page' => $release_order_item_page_types[$i],                'size' => $release_order_item_size,                'base_rate' => $release_order_item_base_rate[$i],                'created' => date('Y-m-d H:i:s', time()),            );            $this->db->insert('release_order_items', $release_order_item_data);            $insert_id = $this->db->insert_id();            $this->db->where('release_order_item_id', $id);            $this->db->delete('release_order_item_insertion_dates');            if ($insert_id) {                $release_order_item_insertion_dates_arr = explode(',', $release_order_item_insertion_dates[$i]);                foreach ($release_order_item_insertion_dates_arr as $release_order_item_insertion_date) {                    $release_order_item_insertion_date_data = array(                        'release_order_item_id' => $insert_id,                        'date' => date('Y-m-d', strtotime(str_replace('/', '-', $release_order_item_insertion_date))),                    );                    $this->db->insert('release_order_item_insertion_dates', $release_order_item_insertion_date_data);                }            }        }                // UPDATE COORDINATOR DETAIL        if($coordinator) {            $this->db->set('coordinator_name', $coordinator->name);            $this->db->set('coordinator_designation', $coordinator->designation);        }        $this->db->set('total_amount', $total_amount);        $this->db->where('id', $id);        $this->db->update($this->_tablename);        // END : order items update//        echo date('Y-m-d',  strtotime(str_replace('/', '-', $release_order_item_insertion_dates[0])));//        die();    }}