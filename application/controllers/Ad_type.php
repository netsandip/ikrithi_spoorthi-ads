<?phpclass Ad_Type extends MY_Controller {    function __construct() {        parent::__construct();        $this->load->helper(array('form'));        $this->load->library(array('form_validation'));        $this->load->model('ad_type_model');    }    public function index() {        $this->data['subview'] = $this->load->view('ad_type/view', NULL, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function quick_add() {        $data['input_name'] = array('type' => 'text', 'id' => 'name', 'name' => 'name');        $this->load->view('ad_type/_modal_add', $data);    }    public function add() {        $this->load->model('vendor_type_model');        $this->data['action'] = 'ad_type/add';        /*         * Form inputs         */        $this->data['input_name'] = array('type' => 'text', 'id' => 'name', 'name' => 'name', 'value' => set_value('name'));        /* Fetch vendor types */        $vendor_types = $this->vendor_type_model->find_all();        $this->data['vendor_type']['options'][''] = 'Select Vendor Type';        if ($vendor_types) {            foreach ($vendor_types as $vendor_type) {                $this->data['vendor_type']['options'][$vendor_type->id] = $vendor_type->name;            }        }        $this->data['vendor_type']['default'] = set_value('vendor_type');        $this->data['sizes']['options'] = array(            '' => 'Select Size',//            'display' => 'Display',//            'classified_display' => 'Classified Display',//            'linage' => 'Linage',//            'word' => 'Word',//            'panel' => 'Panel',            'width_height' => 'Width * Height',            'lines' => 'No of lines',            'words' => 'No of Words',            'seconds' => 'No of Seconds',            'numbers' => 'Numbers'        );        $this->data['sizes']['default'] = set_value('size');        /*         * Validation rules         */        $rules_add_ad_type = array(            array(                'field' => 'name',                'label' => 'Name',                'rules' => 'required|trim'            ),            array(                'field' => 'vendor_type',                'label' => 'Vendor Type',                'rules' => 'required'            ),            array(                'field' => 'size',                'label' => 'Size',                'rules' => 'required'            )        );        $this->form_validation->set_rules($rules_add_ad_type);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->ad_type_model->create();            $this->session->set_flashdata('message', alert_message('Ad type added successfully', 'success'));            redirect('ad_type/add', 'refresh');        }        $this->data['subview'] = $this->load->view('ad_type/add', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function edit($id) {        $this->load->model('vendor_type_model');        $this->data['action'] = 'ad_type/edit/' . $id;        $row = $this->ad_type_model->find_by_id($id);        /*         * Form inputs         */        $this->data['input_name'] = array('type' => 'text', 'id' => 'name', 'name' => 'name', 'value' => $row->name);        /* Fetch vendor types */        $vendor_types = $this->vendor_type_model->find_all();        $this->data['vendor_type']['options'][''] = 'Select Vendor Type';        if ($vendor_types) {            foreach ($vendor_types as $vendor_type) {                $this->data['vendor_type']['options'][$vendor_type->id] = $vendor_type->name;            }        }        $this->data['vendor_type']['default'] = $row->vendor_type_id;        $this->data['sizes']['options'] = array(            '' => 'Select Size',//            'display' => 'Display',//            'classified_display' => 'Classified Display',//            'linage' => 'Linage',//            'word' => 'Word',//            'panel' => 'Panel',            'width_height' => 'Width * Height',            'lines' => 'No of lines',            'words' => 'No of Words',            'seconds' => 'No of Seconds',            'numbers' => 'Numbers'        );        $this->data['sizes']['default'] = $row->size;        /*         * Validation rules         */        $rules_add_ad_type = array(            array(                'field' => 'name',                'label' => 'Name',                'rules' => 'required|trim'            ),            array(                'field' => 'vendor_type',                'label' => 'Vendor Type',                'rules' => 'required'            ),            array(                'field' => 'size',                'label' => 'Size',                'rules' => 'required'            )        );        $this->form_validation->set_rules($rules_add_ad_type);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->ad_type_model->update($id);            $this->session->set_flashdata('message', alert_message('Ad type updated successfully', 'success'));            redirect('ad_type/edit/' . $id, 'refresh');        }        $this->data['subview'] = $this->load->view('ad_type/add', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function fetch_post() {        $draw = $this->input->post('draw');        $limit = $this->input->post('length');        $offset = $this->input->post('start');        $search = $this->input->post('search[value]');        $sort_column = $this->input->post('order[0][column]');        $order = $this->input->post('order[0][dir]');        $data = array(            'limit' => $limit,            'offset' => $offset,            'search' => $search,            'sort' => $sort_column,            'order' => $order        );        $total_records = $this->ad_type_model->total_records();        $return_data = $this->ad_type_model->get_view($data);        if ($return_data['query']) {            $index = 1;            foreach ($return_data['query']->result() as $row) {                $vendor_type = $row->vendor_type_name;                if (empty($row->vendor_type_name)) {                    $vendor_type = '<label class="label label-danger">NOT SET</label>';                }                $rows[] = array(                    $index++,                    html_escape($row->ad_type_name),                    $vendor_type,                    ucwords(str_replace('_', ' ', $row->size)),                    "<a href='" . base_url('ad_type/edit/' . html_escape($row->id)) . "' class='btn btn-xs btn-success'><i class='fa fa-edit'></i></a>"//                    . "&nbsp;&nbsp;<a href='' class='btn btn-xs btn-danger'><i class='fa fa-times'></i></a>"                );            }            $filtered_records = $return_data['count'];        } else {            $filtered_records = 0;            $rows = '';        }        $output = array(            'draw' => (int) $draw,            'recordsFiltered' => $filtered_records,            'recordsTotal' => $total_records,            'data' => $rows        );        $this->output                ->set_content_type('application/json')                ->set_output(json_encode($output));    }}