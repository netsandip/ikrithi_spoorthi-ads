<?phpclass Client extends MY_Controller {    function __construct() {        parent::__construct();        $this->load->helper(array('form'));        $this->load->library(array('form_validation'));        $this->load->model('client_model');    }    public function index() {        $this->data['subview'] = $this->load->view('client/view', NULL, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function quick_add() {        $data['input_parent_id'] = array('type' => 'hidden', 'id' => 'parent_id', 'name' => 'parent_id');        $data['input_firstname'] = array('type' => 'text', 'id' => 'firstname', 'name' => 'firstname');        $data['input_lastname'] = array('type' => 'text', 'id' => 'lastname', 'name' => 'lastname');        $data['input_phone'] = array('type' => 'text', 'id' => 'phone', 'name' => 'phone');        $data['input_email'] = array('type' => 'text', 'id' => 'email', 'name' => 'email');        $data['input_address'] = array('type' => 'textarea', 'id' => 'address', 'name' => 'address', 'rows' => 5);        $this->load->view('client/_modal_add', $data);    }    public function add_individual() {        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'fullname',                'label' => 'Fullname',                'rules' => 'required|trim'            ),            array(                'field' => 'phone',                'label' => 'Phone',                'rules' => 'required|is_natural|trim'            ),            array(                'field' => 'email',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'address',                'label' => 'Address',                'rules' => 'trim'            ),        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {//            $this->session->set_flashdata('message', alert_message(validation_errors(), 'error'));//            redirect('client/add');            $this->data['form_submitted'] = "form_individual";            $this->add();        } else {            $this->client_model->create();            $this->session->set_flashdata('message', alert_message('Client added successfully', 'success'));            redirect('client/add', 'refresh');        }    }    public function add_company() {        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'company_name',                'label' => 'Company name',                'rules' => 'required|trim'            ),            array(                'field' => 'coord_fullname[]',                'label' => 'Fullname',                'rules' => 'required|trim'            ),            array(                'field' => 'coord_phone[]',                'label' => 'Phone',                'rules' => 'required|is_natural|trim'            ),            array(                'field' => 'coord_email[]',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'coord_designation[]',                'label' => 'Designation',                'rules' => 'trim'            ),        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {//            $this->session->set_flashdata('message', alert_message(validation_errors(), 'error'));//            redirect('client/add');            $this->data['form_submitted'] = "form_company";            $this->add();        } else {            $this->client_model->create_company();            $this->session->set_flashdata('message', alert_message('Client added successfully', 'success'));            redirect('client/add', 'refresh');        }    }    public function edit_individual($id) {        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'fullname',                'label' => 'Fullname',                'rules' => 'required|trim'            ),            array(                'field' => 'phone',                'label' => 'Phone',                'rules' => 'required|is_natural|trim'            ),            array(                'field' => 'email',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'address',                'label' => 'Address',                'rules' => 'trim'            ),        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {//            $this->session->set_flashdata('message', alert_message(validation_errors(), 'error'));//            redirect('client/add');            $this->data['form_submitted'] = "form_individual";            $this->edit($id);        } else {            $this->client_model->update($id);            $this->session->set_flashdata('message', alert_message('Client updated successfully', 'success'));            redirect('client/edit/' . $id, 'refresh');        }    }    public function edit_company($id) {        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'company_name',                'label' => 'Company name',                'rules' => 'required|trim'            ),        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {//            $this->session->set_flashdata('message', alert_message(validation_errors(), 'error'));//            redirect('client/add');            $this->data['form_submitted'] = "form_company";            $this->edit($id);        } else {            $this->client_model->update_company($id);            $this->session->set_flashdata('message', alert_message('Client updated successfully', 'success'));            redirect('client/edit/' . $id, 'refresh');        }    }    public function add() {        $this->data['action_individual'] = 'client/add_individual';        $this->data['action_company'] = 'client/add_company';        /*         * Form inputs         */        // Fetch clients        $clients = $this->client_model->find_all();        $this->data['dropdown_client']['options'][0] = 'Select Master Client';        foreach ($clients as $client) {            $this->data['dropdown_client']['options'][$client->id] = $client->name;        }        $this->data['dropdown_client']['default'] = set_value('parent_client');        $this->data['input_company_name'] = array('type' => 'text', 'id' => 'company_name', 'name' => 'company_name', 'value' => set_value('company_name'));        $this->data['input_fullname'] = array('type' => 'text', 'id' => 'fullname', 'name' => 'fullname', 'value' => set_value('fullname'));        $this->data['input_phone'] = array('type' => 'text', 'id' => 'phone', 'name' => 'phone', 'value' => set_value('phone'));        $this->data['input_email'] = array('type' => 'text', 'id' => 'email', 'name' => 'email', 'value' => set_value('email'));        $this->data['input_address'] = array('type' => 'textarea', 'id' => 'address', 'name' => 'address', 'rows' => 5, 'value' => set_value('address'));        // Get any messages        $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        //        Co ordinator fields        $this->data['input_coord_fullname'] = array('name' => 'coord_fullname[]', 'value' => set_value('coord_fullname[]'));        $this->data['input_coord_phone'] = array('name' => 'coord_phone[]', 'value' => set_value('coord_phone[]'));        $this->data['input_coord_email'] = array('name' => 'coord_email[]', 'value' => set_value('coord_email[]'));        $this->data['input_coord_designation'] = array('name' => 'coord_designation[]', 'value' => set_value('coord_designation[]'));        $this->data['subview'] = $this->load->view('client/add', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function edit($id) {        $this->data['action_individual'] = 'client/edit_individual/' . $id;        $this->data['action_company'] = 'client/edit_company/' . $id;        $this->data['client_id'] = $id;        $client = $this->client_model->find_by_id($id);        $coordinators = $this->find_coordinators($id);        /*         * Form inputs         */        if ($client->type == 'company') {            $this->data['form_submitted'] = "form_company";            // set value from db            $this->data['input_company_name'] = array('type' => 'text', 'id' => 'company_name', 'name' => 'company_name', 'value' => $client->name);            // set values from form            $this->data['input_fullname'] = array('type' => 'text', 'id' => 'fullname', 'name' => 'fullname', 'value' => set_value('fullname'));            $this->data['input_phone'] = array('type' => 'text', 'id' => 'phone', 'name' => 'phone', 'value' => set_value('phone'));            $this->data['input_email'] = array('type' => 'text', 'id' => 'email', 'name' => 'email', 'value' => set_value('email'));            $this->data['input_address'] = array('type' => 'textarea', 'id' => 'address', 'name' => 'address', 'rows' => 5, 'value' => set_value('address'));        } else {            $this->data['form_submitted'] = "form_individual";            // set values from form            $this->data['input_company_name'] = array('type' => 'text', 'id' => 'company_name', 'name' => 'company_name', 'value' => set_value('company_name'));            // set value from db            $this->data['input_fullname'] = array('type' => 'text', 'id' => 'fullname', 'name' => 'fullname', 'value' => $client->name);            $this->data['input_phone'] = array('type' => 'text', 'id' => 'phone', 'name' => 'phone', 'value' => $client->phone);            $this->data['input_email'] = array('type' => 'text', 'id' => 'email', 'name' => 'email', 'value' => $client->email);            $this->data['input_address'] = array('type' => 'textarea', 'id' => 'address', 'name' => 'address', 'rows' => 5, 'value' => $client->address);        }        // Fetch clients        $clients = $this->client_model->find_by_query(array('id !=' => $id));        $this->data['dropdown_client']['options'][0] = 'Select Master Client';        foreach ($clients as $dd_client) {            $this->data['dropdown_client']['options'][$dd_client->id] = $dd_client->name;        }        $this->data['dropdown_client']['default'] = $client->parent_id;        // Get any messages        $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        //        Co ordinator fields        $this->data['input_coord_fullname'] = array('name' => 'coord_fullname[]', 'value' => set_value('coord_fullname[]'));        $this->data['input_coord_phone'] = array('name' => 'coord_phone[]', 'value' => set_value('coord_phone[]'));        $this->data['input_coord_email'] = array('name' => 'coord_email[]', 'value' => set_value('coord_email[]'));        $this->data['input_coord_designation'] = array('name' => 'coord_designation[]', 'value' => set_value('coord_designation[]'));        $this->data['subview'] = $this->load->view('client/add', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function fetch_post() {        $draw = $this->input->post('draw');        $limit = $this->input->post('length');        $offset = $this->input->post('start');        $search = $this->input->post('search[value]');        $sort_column = $this->input->post('order[0][column]');        $order = $this->input->post('order[0][dir]');        $data = array(            'limit' => $limit,            'offset' => $offset,            'search' => $search,            'sort' => $sort_column,            'order' => $order        );        $total_records = $this->client_model->total_records();        $return_data = $this->client_model->get_view($data);        if ($return_data['query']) {            $index = 1;            foreach ($return_data['query']->result() as $row) {                if ($row->type === "company") {                    $add_coordinator = "&nbsp;<a href='" . base_url('client/manage_coordinator/' . html_escape($row->id)) . "' class='btn btn-xs btn-primary'><i class='fa fa-users'></i></a>";                } else {                    $add_coordinator = "&nbsp;<a class='btn btn-xs btn-primary disabled'><i class='fa fa-users'></i></a>";                }                $rows[] = array(                    $index++,                    html_escape($row->name),                    html_escape($row->email),                    html_escape($row->phone),                    "<a href='" . base_url('client/edit/' . html_escape($row->id)) . "' class='btn btn-xs btn-success'><i class='fa fa-edit'></i></a>" . $add_coordinator//                    . "&nbsp;&nbsp;<a href='' class='btn btn-xs btn-danger'><i class='fa fa-times'></i></a>"                );            }            $filtered_records = $return_data['count'];        } else {            $filtered_records = 0;            $rows = '';        }        $output = array(            'draw' => (int) $draw,            'recordsFiltered' => $filtered_records,            'recordsTotal' => $total_records,            'data' => $rows        );        $this->output                ->set_content_type('application/json')                ->set_output(json_encode($output));    }    public function find_release_orders_html($client_id) {        $html = "";        $sub_clients = $this->client_model->find_by_query(array('parent_id' => $client_id));        $rows = $this->client_model->find_release_orders($client_id);        if ($sub_clients) {            $html .= '<div class="form-group">';            $html .= form_label('Select Sub Client');            $sub_client_options[''] = '--';            foreach ($sub_clients as $sub_client) {                $sub_client_options[$sub_client->id] = $sub_client->name;            }            $html .= form_dropdown('sub_client', $sub_client_options, '', array('class' => 'form-control'));            $html .= '</div>';        }        if ($rows) {            $html .= '<div class="form-group">';            $html .= form_label('Select Release Order');            foreach ($rows as $row) {                $options[$row->id] = $row->release_order_no;            }            $html .= form_multiselect('release_order[]', $options, '', array('class' => 'form-control'));            $html .= '</div>';            $html .= '<div class="form-group">';            $html .= form_button('display_details', 'Display Details', array('class' => 'btn btn-primary', 'onclick' => 'showInvoice()'));            $html .= '</div>';        } else {            $html .= '<div class="form-group">';            $html .= '<span class="text-danger">';            $html .= 'Release orders not found for this client';            $html .= '</span>';            $html .= '</div>';        }        $this->output->set_output($html);    }    public function find_invoices_html($client_id) {        $output = array('result' => 'fail');        $html = "";        $rows = $this->client_model->find_invoices($client_id);        if ($rows) {            $html .= '<div class="form-group">';//            $html .= form_label('Select Release Order');            $options[''] = 'Select Invoice';            foreach ($rows as $row) {                $options[$row->id] = $row->invoice_no;            }            $html .= form_dropdown('invoice', $options, '', array('id' => 'invoice', 'class' => 'form-control'));            $html .= '</div>';            $output['result'] = 'success';//            $html .= '<div class="form-group">';//            $html .= form_button('display_details', 'Display Details', array('class' => 'btn btn-primary', 'onclick' => 'showInvoice()'));//            $html .= '</div>';        } else {            $html .= '<div class="form-group">';            $html .= '<span class="text-danger">';            $html .= 'Invoices not found for this client';            $html .= '</span>';            $html .= '</div>';        }        $output['html'] = $html;        $this->output                ->set_content_type('application/json')                ->set_output(json_encode($output));    }    public function manage_coordinator($client_id = "") {        $this->data['action'] = "client/manage_coordinator/" . $client_id;        $this->data['form_title'] = "Add";        $this->data['client_id'] = $client_id;        $this->data['coordinators'] = $this->find_coordinators($client_id);        if (empty($client_id)) {            redirect('client', 'refresh');        }        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'fullname',                'label' => 'Name',                'rules' => 'required|trim'            ),            array(                'field' => 'phone',                'label' => 'Phone',                'rules' => 'required|trim'            ),            array(                'field' => 'email',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'designation',                'label' => 'Designation',                'rules' => 'required|trim'            )        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->client_model->add_coordinator($client_id);            $this->session->set_flashdata('message', alert_message('Record added successfully', 'success'));            redirect('client/manage_coordinator/' . $client_id, 'refresh');        }        //        Form inputs        $this->data['input_fullname'] = array('name' => 'fullname', 'value' => set_value('fullname'));        $this->data['input_phone'] = array('name' => 'phone', 'value' => set_value('phone'));        $this->data['input_email'] = array('name' => 'email', 'value' => set_value('email'));        $this->data['input_designation'] = array('name' => 'designation', 'value' => set_value('designation'));        $this->data['subview'] = $this->load->view('client/view_coordinator', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function edit_coordinator($client_id = "", $coordinator_id = "") {        $this->data['action'] = "client/edit_coordinator/" . $client_id . '/' . $coordinator_id;        $this->data['form_title'] = "Edit";        $this->data['client_id'] = $client_id;        $this->data['coordinators'] = $this->find_coordinators($client_id);        if (empty($client_id)) {            redirect('client', 'refresh');        }        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'fullname',                'label' => 'Name',                'rules' => 'required|trim'            ),            array(                'field' => 'phone',                'label' => 'Phone',                'rules' => 'required|trim'            ),            array(                'field' => 'email',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'designation',                'label' => 'Designation',                'rules' => 'required|trim'            )        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->client_model->update_coordinator($coordinator_id);            $this->session->set_flashdata('message', alert_message('Record updated successfully', 'success'));            redirect('client/edit_coordinator/' . $client_id . '/' . $coordinator_id, 'refresh');        }        $row = $this->client_model->get_coordinator($coordinator_id);//        Form inputs        $this->data['input_fullname'] = array('name' => 'fullname', 'value' => $row->name);        $this->data['input_phone'] = array('name' => 'phone', 'value' => $row->phone);        $this->data['input_email'] = array('name' => 'email', 'value' => $row->email);        $this->data['input_designation'] = array('name' => 'designation', 'value' => $row->designation);        $this->data['subview'] = $this->load->view('client/view_coordinator', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function find_coordinators($client_id = "") {        if (empty($client_id)) {            return FALSE;        }        $result = $this->client_model->get_coordinators($client_id);        return $result;    }}