<?phpclass Vendor extends MY_Controller {    function __construct() {        parent::__construct();        $this->load->helper(array('form'));        $this->load->library(array('form_validation'));        $this->load->model('vendor_model');    }    public function index() {        $this->data['subview'] = $this->load->view('vendor/view', NULL, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function quick_add() {        $data['input_parent_id'] = array('type' => 'hidden', 'id' => 'parent_id', 'name' => 'parent_id');        $data['input_firstname'] = array('type' => 'text', 'id' => 'firstname', 'name' => 'firstname');        $data['input_lastname'] = array('type' => 'text', 'id' => 'lastname', 'name' => 'lastname');        $data['input_phone'] = array('type' => 'text', 'id' => 'phone', 'name' => 'phone');        $data['input_email'] = array('type' => 'text', 'id' => 'email', 'name' => 'email');        $data['input_address'] = array('type' => 'textarea', 'id' => 'address', 'name' => 'address', 'rows' => 5);        $this->load->view('vendor/_modal_add', $data);    }    public function add() {        $this->load->model('publication_model');        $this->load->model('vendor_type_model');        $this->data['action'] = 'vendor/add';        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'company_name',                'label' => 'Company Name',                'rules' => 'required|trim'            ),            array(                'field' => 'address',                'label' => 'Address',                'rules' => 'required|trim'            ),            array(                'field' => 'fullname[]',                'label' => 'Fullname',                'rules' => 'required|trim'            ),            array(                'field' => 'phone[]',                'label' => 'Phone',                'rules' => 'required|is_natural|trim'            ),            array(                'field' => 'email[]',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'designation[]',                'label' => 'Designation',                'rules' => 'required|trim'            )        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->vendor_model->create();            $this->session->set_flashdata('message', alert_message('Vendor added successfully', 'success'));            redirect('vendor', 'refresh');        }        /*         * Form inputs         */        $this->data['input_company_name'] = array('type' => 'text', 'id' => 'company_name', 'name' => 'company_name', 'value' => set_value('company_name'));        $this->data['input_company_phone'] = array('id' => 'company_phone', 'name' => 'company_phone', 'value' => set_value('company_phone'));        $this->data['input_commission'] = array('id' => 'commission', 'name' => 'commission', 'value' => set_value('commission'));        $this->data['input_address'] = array('id' => 'address', 'name' => 'address', 'rows' => 3, 'value' => set_value('address'));//        Co ordinator fields        $this->data['input_fullname'] = array('name' => 'fullname[]', 'value' => set_value('fullname[]'));        $this->data['input_phone'] = array('name' => 'phone[]', 'value' => set_value('phone[]'));        $this->data['input_email'] = array('name' => 'email[]', 'value' => set_value('email[]'));        $this->data['input_designation'] = array('name' => 'designation[]', 'value' => set_value('designation[]'));        /* Fetch publications */        $all_vendor_publications = $this->vendor_model->get_all_vendor_publications();        $publications = $this->publication_model->find_not_in('id', $all_vendor_publications);        $this->data['dropdown_publication']['options'][''] = 'Select Publications';        if ($publications) {            foreach ($publications as $publication) {                $this->data['dropdown_publication']['options'][$publication->id] = $publication->name;            }        }        $this->data['dropdown_publication']['default'] = set_value('publications');        /* Fetch vendor types */        $vendor_types = $this->vendor_type_model->find_all();        $this->data['dropdown_vendor_type']['options'][''] = 'Select Vendor Type';        if ($vendor_types) {            foreach ($vendor_types as $vendor_type) {                $this->data['dropdown_vendor_type']['options'][$vendor_type->id] = $vendor_type->name;            }        }        $this->data['dropdown_vendor_type']['default'] = set_value('vendor_type');        $this->data['subview'] = $this->load->view('vendor/add', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function edit($id) {        $this->load->model('publication_model');        $this->load->model('vendor_type_model');        $this->data['action'] = 'vendor/edit/' . $id;        $this->data['vendor_id'] = $id;        $row = $this->vendor_model->find_by_id($id);        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'company_name',                'label' => 'Company Name',                'rules' => 'required|trim'            ),            array(                'field' => 'address',                'label' => 'Address',                'rules' => 'required|trim'            )        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->vendor_model->update($id);            $this->session->set_flashdata('message', alert_message('Vendor updated successfully', 'success'));            redirect('vendor/edit/' . $id, 'refresh');        }        /*         * Form inputs         */        $this->data['input_company_name'] = array('type' => 'text', 'id' => 'company_name', 'name' => 'company_name', 'value' => $row->company_name);        $this->data['input_company_phone'] = array('type' => 'text', 'id' => 'company_phone', 'name' => 'company_phone', 'value' => $row->company_phone);        $this->data['input_commission'] = array('type' => 'text', 'id' => 'comission', 'name' => 'commission', 'value' => $row->commission);        $this->data['input_address'] = array('type' => 'textarea', 'id' => 'address', 'name' => 'address', 'rows' => 5, 'value' => $row->address);        /* Fetch publications */        $all_vendor_publications = $this->vendor_model->get_all_vendor_publications();        $publications = $this->publication_model->find_not_in('id', $all_vendor_publications);        $this->data['dropdown_publication']['options'][''] = 'Select Publications';        if ($publications) {            foreach ($publications as $publication) {                $this->data['dropdown_publication']['options'][$publication->id] = $publication->name;            }        }        $vendor_publications = $this->vendor_model->get_publications($id);        $selected_publications = array();        if ($vendor_publications !== FALSE) {            foreach ($vendor_publications as $vendor_publication) {                $selected_publications[] = $vendor_publication->publication_id;                // include vendor publications                $this->data['dropdown_publication']['options'][$vendor_publication->publication_id] = $vendor_publication->publication_name;            }        }        $this->data['dropdown_publication']['default'] = $selected_publications;        /* Fetch vendor types */        $vendor_types = $this->vendor_type_model->find_all();        $this->data['dropdown_vendor_type']['options'][''] = 'Select Vendor Type';        if ($vendor_types) {            foreach ($vendor_types as $vendor_type) {                $this->data['dropdown_vendor_type']['options'][$vendor_type->id] = $vendor_type->name;            }        }        $this->data['dropdown_vendor_type']['default'] = $row->vendor_type_id;        $this->data['subview'] = $this->load->view('vendor/add', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function fetch_post() {        $draw = $this->input->post('draw');        $limit = $this->input->post('length');        $offset = $this->input->post('start');        $search = $this->input->post('search[value]');        $sort_column = $this->input->post('order[0][column]');        $order = $this->input->post('order[0][dir]');        $data = array(            'limit' => $limit,            'offset' => $offset,            'search' => $search,            'sort' => $sort_column,            'order' => $order        );        $total_records = $this->vendor_model->total_records();        $return_data = $this->vendor_model->get_view($data);        if ($return_data['query']) {            $index = 1;            foreach ($return_data['query']->result() as $row) {                $vendor_type = $row->vendor_type_name;                if (empty($row->vendor_type_id)) {                    $vendor_type = '<label class="label label-danger">NOT SET</label>';                }                $rows[] = array(                    $index++,                    html_escape($row->company_name),                    html_escape($row->company_phone),                    html_escape($row->commission),                    $vendor_type,                    "<a href='" . base_url('vendor/edit/' . html_escape($row->id)) . "' class='btn btn-xs btn-success'><i class='fa fa-edit'></i></a>&nbsp;<a title='Manage Coordinators' href='" . base_url('vendor/manage_coordinator/' . html_escape($row->id)) . "' class='btn btn-xs btn-primary'><i class='fa fa-users'></i></a>"//                    . "&nbsp;&nbsp;<a href='' class='btn btn-xs btn-danger'><i class='fa fa-times'></i></a>"                );            }            $filtered_records = $return_data['count'];        } else {            $filtered_records = 0;            $rows = '';        }        $output = array(            'draw' => (int) $draw,            'recordsFiltered' => $filtered_records,            'recordsTotal' => $total_records,            'data' => $rows        );        $this->output                ->set_content_type('application/json')                ->set_output(json_encode($output));    }    public function manage_coordinator($vendor_id = "") {        $this->data['action'] = "vendor/manage_coordinator/" . $vendor_id;        $this->data['form_title'] = "Add";        $this->data['vendor_id'] = $vendor_id;        $this->data['coordinators'] = $this->find_coordinators($vendor_id);        if (empty($vendor_id)) {            redirect('vendor', 'refresh');        }        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'fullname',                'label' => 'Name',                'rules' => 'required|trim'            ),            array(                'field' => 'phone',                'label' => 'Phone',                'rules' => 'required|trim'            ),            array(                'field' => 'email',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'designation',                'label' => 'Designation',                'rules' => 'required|trim'            )        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->vendor_model->add_coordinator($vendor_id);            $this->session->set_flashdata('message', alert_message('Record added successfully', 'success'));            redirect('vendor/manage_coordinator/' . $vendor_id, 'refresh');        }        //        Form inputs        $this->data['input_fullname'] = array('name' => 'fullname', 'value' => set_value('fullname'));        $this->data['input_phone'] = array('name' => 'phone', 'value' => set_value('phone'));        $this->data['input_email'] = array('name' => 'email', 'value' => set_value('email'));        $this->data['input_designation'] = array('name' => 'designation', 'value' => set_value('designation'));        $this->data['subview'] = $this->load->view('vendor/view_coordinator', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function edit_coordinator($vendor_id = "", $coordinator_id = "") {        $this->data['action'] = "vendor/edit_coordinator/" . $vendor_id . '/' . $coordinator_id;        $this->data['form_title'] = "Edit";        $this->data['vendor_id'] = $vendor_id;        $this->data['coordinators'] = $this->find_coordinators($vendor_id);        if (empty($vendor_id)) {            redirect('vendor', 'refresh');        }        /*         * Validation rules         */        $rules_add_customer = array(            array(                'field' => 'fullname',                'label' => 'Name',                'rules' => 'required|trim'            ),            array(                'field' => 'phone',                'label' => 'Phone',                'rules' => 'required|trim'            ),            array(                'field' => 'email',                'label' => 'Email',                'rules' => 'required|valid_email|trim'            ),            array(                'field' => 'designation',                'label' => 'Designation',                'rules' => 'required|trim'            )        );        $this->form_validation->set_rules($rules_add_customer);        if ($this->form_validation->run() === FALSE) {            $this->data['message'] = (validation_errors() == '') ? $this->session->flashdata('message') : alert_message(validation_errors(), 'error');        } else {            $this->vendor_model->update_coordinator($coordinator_id);            $this->session->set_flashdata('message', alert_message('Record updated successfully', 'success'));            redirect('vendor/edit_coordinator/' . $vendor_id . '/' . $coordinator_id, 'refresh');        }        $row = $this->vendor_model->get_coordinator($coordinator_id);//        Form inputs        $this->data['input_fullname'] = array('name' => 'fullname', 'value' => $row->name);        $this->data['input_phone'] = array('name' => 'phone', 'value' => $row->phone);        $this->data['input_email'] = array('name' => 'email', 'value' => $row->email);        $this->data['input_designation'] = array('name' => 'designation', 'value' => $row->designation);        $this->data['subview'] = $this->load->view('vendor/view_coordinator', $this->data, TRUE);        $this->load->view('layout/header');        $this->load->view('layout/_main', $this->data);        $this->load->view('layout/footer');    }    public function find_coordinator($coordinator_id = "") {        if (empty($coordinator_id)) {            return FALSE;        }        $row = $this->vendor_model->get_coordinator($coordinator_id);        return $row;    }    public function find_coordinators($vendor_id = "") {        if (empty($vendor_id)) {            return FALSE;        }        $result = $this->vendor_model->get_coordinators($vendor_id);        return $result;    }    public function find_coordinators_html($vendor_id = "") {        $html = "";        if (empty($vendor_id)) {            return FALSE;        }        $results = $this->vendor_model->get_coordinators($vendor_id);        if ($results) {            $html .= "<option value=''>Select Coordinator</option>";            foreach ($results as $result) {                $html .= "<option value='" . html_escape($result->id) . "'>";                $html .= $result->name . " - " . $result->designation;                $html .= "</option>";            }        } else {            $html = "<option value=''>No Coordinators Found</option>";        }        $this->output->set_output($html);    }    public function find_publications($id) {        $html = "";        $publications = $this->vendor_model->get_publications($id);        if ($publications) {            $html .= "<option value=''>Select Publication</option>";            foreach ($publications as $publication) {                $html .= "<option data-id='" . html_escape($publication->publication_id) . "' value='" . html_escape($publication->publication_name) . "'>";                $html .= $publication->publication_name;                $html .= "</option>";            }        } else {            $html = "<option value=''>No Publications Found</option>";        }        $this->output->set_output($html);    }    public function find_packages($id, $ad_type_id) {        $html = "";        $packages = $this->vendor_model->get_packages($id, $ad_type_id);        if ($packages) {            $html .= "<option value=''>Select Package</option>";            foreach ($packages as $package) {                $html .= "<option value='" . html_escape($package->package_id) . "'>";                $html .= html_escape($package->package_name);                $html .= "</option>";            }        } else {            $html .= "<option value=''>No Packages Found</option>";        }        $this->output->set_output($html);    }    public function find_release_orders_html($vendor_id) {        $output = array('result' => 'fail');        $html = "";        $rows = $this->vendor_model->find_release_orders($vendor_id);        if ($rows) {            $html .= '<div class="form-group">';//            $html .= form_label('Select Release Order');            $options[''] = 'Select Release Order';            foreach ($rows as $row) {                $options[$row->id] = $row->release_order_no;            }            $html .= form_dropdown('release_order', $options, '', array('id' => 'release_order', 'class' => 'form-control'));            $html .= '</div>';            $output['result'] = 'success';//            $html .= '<div class="form-group">';//            $html .= form_button('display_details', 'Display Details', array('class' => 'btn btn-primary', 'onclick' => 'showInvoice()'));//            $html .= '</div>';        } else {            $html .= '<div class="form-group">';            $html .= '<span class="text-danger">';            $html .= 'Release orders not found for this vendor';            $html .= '</span>';            $html .= '</div>';        }        $output['html'] = $html;        $this->output                ->set_content_type('application/json')                ->set_output(json_encode($output));    }    public function get_commission($id) {        $vendor = $this->vendor_model->find_by_id($id);                $output = array(            'result' => 'success',            'commission' => $vendor->commission        );        $this->output                ->set_content_type('application/json')                ->set_output(json_encode($output));    }}